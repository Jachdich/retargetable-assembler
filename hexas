#!/usr/bin/python3

import sys
import assembler
# import definition_hexcpu as definition
import definition_craftercpu as definition

def usage():
    print("Usage: " + sys.argv[0] + " [-h] infile [outfile]")

def pad(bin_str, l=8):
    return "0" * (l - len(bin_str)) + bin_str
    
if len(sys.argv) < 2: usage(); exit(0)
if sys.argv[1] == "-h": #output in hex
    if len(sys.argv) < 3: usage(); exit(0)
    if len(sys.argv) > 4: usage(); exit(0)
    infile = sys.argv[2]
    if len(sys.argv) == 4: outfile = sys.argv[3]
    else: outfile = "-"

    with open(infile, "r") as f:
        code = f.read()
    
    asm = assembler.Assembler(code, definition)
    data = asm.assemble()

    out  =  ", ".join(["0x" + pad(hex(n)[2:], 2) for n in data]) + "\n"
    out += "\n".join([pad(bin(n)[2:], 8) for n in data]) + "\n"
    
    if outfile != "-":
        with open(outfile, "w") as f:
            f.write(out)
    else:
        print(out)
else: #output in binary: useless for now so ignore
    pass